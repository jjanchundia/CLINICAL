
*Se agrega comunicación entre capas, referencias a los proyectos.
	-En CLINICAL.Application.UseCase se referencia a proyectos(CLINICAL.Application.Dtos, CLINICAL.Application.Interface, CLINICAL.Domain)
	-En CLINICAL.Infrastucture se referencia a proyecto(CLINICAL.Application).
	-En CLINICAL.Persistence se referencia a proyecto(CLINICAL.Application.Interface).
	-En CLINICAL.Api se referencia a proyecto(CLINICAL.Application.UseCase).
*Se agrega paquetes nugets: automapper y automapper de inyeccion de dependencia, MediatR, FluentValidation.DependencyInjectionExtensions,
en proyecto CLINICAL.Application.UseCase.
*Se agrega nugets Dapper en CLINICAL.Persistence.
*Se crea base de datos CLINICAL y Tabla Analisis.
*Se configura appsettings para cadena de conexión.
*Se crea carpeta context en proyecto CLINICAL.Persistence.
*Se crea clase ApplicationDbContext para nuestro context:
private readonly IConfiguration _configuration;
private readonly string _connectionString;

//Inyectamos servicios.
public ApplicationDbContext(IConfiguration configuration)
{
    _configuration = configuration;
    _connectionString = _configuration.GetConnectionString("ClinicalConnection")!; //! x asignación nula
}

//Nos ayudará a conectarnos a la BD
public IDbConnection CreateConnection => new SqlConnection(_connectionString);
*Creamos clase en CLINICAL.Persistence InjectionExtensions y configuramos context para que se configure como ciclo de vida Singleton.
*Creamos carpeta Entities en CLINICAL.Domain y ahi dentro creamos entidad de Analisis con los campos de la BD
*Se crea carpeta Commonds en UseCase, se crea crea en Commonds carpeta Bases.
*Se crea clase BaseResponse<T> generica, para manejo de Midlewares.
*Se crea interfaz para tabla Analisis en Interface, y se crea Repository analisis en Persistence, dentro de Repositories.
*Se crea logica para consultar listado de Analisis-Tabla con Store procedure.
*Se crea BD, tabla y store procedure para consultar Analisis.

*Se crea proceso para consultar por AnalisisId
*Se cambia paquetes nugest de MediatR.
*En proyecto CLINICAL.Application.UseCase se desintala paquete nuget MediatR.Extensions.Microsoft.DependencyInjection.
*Luego actualizamos MediatR a la versión mas actualizada.
*En proyecto CLINICAL.Application.UseCase.Extensions se actualiza método
//Forma de registrar Assembly de nueva actualización de MediatR
services.AddMediatR(x=> x.RegisterServicesFromAssemblies(Assembly.GetExecutingAssembly()));

+Para consultar/crear/actualizar/eliminar:
Pasos:
1.- Se modifica/agrega interfaz en CLINICAL.Application.Interface 
	Task<IEnumerable<Analisis>> ListAnalisis();
	Task<Analisis> AnalisisById(int id);
	Task<bool> AnalisisRegister(Analisis analisis);
	Task<bool> AnalisisUpdate(Analisis analisis);
2.- Se agrega metodo en Repositorio en CLINICAL.Persistence.Repositories
	Task<IEnumerable<Analisis>> ListAnalisis();
	Task<Analisis> AnalisisById(int id);
	Task<bool> AnalisisRegister(Analisis analisis);
	Task<bool> AnalisisUpdate(Analisis analisis);
3.- Luego los casos de usos en CLINICAL.Application.UseCase.UseCases.Analisis.Commands.UpdateCommand, 
vamos a agregar la clase para actualizar: UpdateAnalisisCommand, lo mismo es para los demas(consutla, agregar, elminar).
4.- Luego se agrega el Handler en CLINICAL.Application.UseCase.UseCases.Analisis.Commands.UpdateCommand,
vamos a agregar la clase para actualizar: UpdateAnalisisHandler, lo mismo es para los demas(consutla, agregar, elminar).
5.- Luego se mapea entidad en CLINICAL.Application.UseCase.Mappings
vamos a agregar para actualizar: 
CreateMap<UpdateAnalisisCommand, Analisis>();
lo mismo es para los demas(consutla, agregar, elminar).
6.- Se agrega clase para validar con FluentValidation, en este caso para agregar o actualizar, se agregó UpdateAnalisisValidator,
en CLINICAL.Application.UseCase.UseCases.Analisis.Commands.UpdateCommand:
public class UpdateAnalisisValidator : AbstractValidator<UpdateAnalisisCommand>
{
    public UpdateAnalisisValidator()
    {
        RuleFor(x => x.Name)
            .NotNull().WithMessage("El campo Nombre no puede ser nulo")
            .NotEmpty().WithMessage("El campo nombre no puede ser vacío");
    }
}
7.- Por último agregamos el metodo en el controller:
[HttpPost("update")]
public async Task<IActionResult> UpdateAnalisis(UpdateAnalisisCommand command)
{
    var response = await _mediator.Send(command);
    return Ok(response);
}

*Para usar FluenteValidation se inyecta el servicio en InjectionEsxtensions de CLINICAL:Application.UseCases
//Se inyecta servicio de FluentValidation
services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());

*Para Middleware:
*Se crea clase en CLINICAL.Application.UseCase - Base - Exeptions, llamada ValidationExeptions.


*Para implementar el patron Repository se crea carpeta Interface en CLINICAL.Application.Interface.
*Movemos IAnalisisRepository a carpeta.
*Se crea interfaz IGenericRepository(Generica).
*Se crea metodos en clase anterior para usarlos para todos.
*Se crea clase GenericRepository en CLINICAL.Persistence.Repositories donde implementamos de Interfaz IGenericRepository.
*Creamos interface IUnitOfWork en CLINICAL.Application.Interface.Interface.
*Creamos clase UnitOfWork en CLINICAL.Persistence.Repositories e implementamos interfaz anterior.
*Inyectamos servicio en CLINICAL.Persistence.Extensions:
//Inyectamos servicio de UnitOfWork
services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));
services.AddTransient<IUnitOfWork, UnitOfWork>();


OJO:
Se elimina clase e interfaz AnalisisRepository, IAnalisisRepository, para esto se implementó UnitOfWork y el patron Repository.

*Para usar correctamente los patrones creados:
*Se crea en CLINICAL.Application.UseCase en Command, para cambiar el state, las clases command y handler correspondientes.
*Se crea metodos con sus propiedades anteriormente, esta vez con la inyeccion al patron UnitOfWork, se crea procedure también.